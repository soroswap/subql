services:
  app:
      image: node:20  # Official Node.js 20 image
      container_name: node-subql-app
      working_dir: /app
      volumes:
        - .:/app  # Mount project directory
      env_file:
        - .env  # Load environment variables
      depends_on: subquery-node
      stdin_open: true  
      tty: true
  postgres:
    container_name: postgres
    build:
      context: .
      dockerfile: ./docker/pg-Dockerfile
    ports:
      - ${POSTGRES_PORT}:5432
    volumes:
      - .data/postgres:/var/lib/postgresql/data
    environment:
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 5s
      timeout: 5s
      retries: 5

  subquery-node:
    image: subquerynetwork/subql-node-stellar:latest
    depends_on:
      "postgres":
        condition: service_healthy
    restart: unless-stopped
    environment:
      DB_USER: ${POSTGRES_USER}
      DB_PASS: ${POSTGRES_PASSWORD}
      DB_DATABASE: ${POSTGRES_DB}
      DB_HOST: postgres
      DB_PORT: ${POSTGRES_PORT}
    volumes:
      - ./:/app
    command:
      - ${SUB_COMMAND:-} # set SUB_COMMAND env variable to "test" to run tests
      - -f=/app
      - --db-schema=app
      - --workers=1 # The more the faster
      - --batch-size=5 # The higher the faster, set low to avoid rate limit on SDF endpoint
    healthcheck:
      test: ["CMD", "curl", "-f", "http://subquery-node:3000/ready"]
      interval: 3s
      timeout: 5s
      retries: 10
    dns:
      - 8.8.8.8
      - 8.8.4.4

  graphql-engine:
    image: subquerynetwork/subql-query:latest
    ports:
      - 3000:3000
    depends_on:
      "postgres":
        condition: service_healthy
      "subquery-node":
        condition: service_healthy
    restart: always
    environment:
      DB_USER: ${POSTGRES_USER}
      DB_PASS: ${POSTGRES_PASSWORD}
      DB_DATABASE: ${POSTGRES_DB}
      DB_HOST: postgres
      DB_PORT: ${POSTGRES_PORT}
    command:
      - --name=app
      - --playground
      - --indexer=http://subquery-node:3000

